CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

PROJECT(vari)
SET(EXE_NAME ${PROJECT_NAME})

MESSAGE(STATUS "CREATING VARI APP\n")

#Set build type
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

#Set compiler flags
set(CMAKE_CXX_STANDARD 17)
SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -Wall -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fPIC -pthread")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DQT_NO_DEBUG")
SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   -DDEBUG_MODE -DQT_QML_DEBUG")

#Find packages
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
SET(MODULES_FOLDERS "modules")

INCLUDE(common)

FIND_PACKAGE(Qt5Core    REQUIRED)
FIND_PACKAGE(Qt5Gui     REQUIRED)
FIND_PACKAGE(Qt5Widgets     REQUIRED)
FIND_PACKAGE(Qt5Sql     REQUIRED)

FIND_PACKAGE(Coin REQUIRED)
FIND_PACKAGE(SoQt REQUIRED)

IF (${Qt5Core_FOUND})
    MESSAGE(STATUS "Found Qt 5 ${Qt5Core_VERSION}")
    MESSAGE(STATUS "Qt 5 Core Directory: ${Qt5Core_DIR}\n")
ENDIF()
IF (${Coin_FOUND})
    MESSAGE(STATUS "Found Coin3D ${Coin_VERSION}")
    MESSAGE(STATUS "Coin3D Directory: ${Coin_DIR}\n")
ENDIF()
IF (${SoQt_FOUND})
    MESSAGE(STATUS "Found SoQt ${SoQt_VERSION}")
    MESSAGE(STATUS "SoQt Directory: ${SoQt_DIR}\n")
ENDIF()

INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Sql_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Coin_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${SoQt_INCLUDE_DIRS})

#Set application version
FIND_PACKAGE(Git REQUIRED)
SET(GIT_RES_LONG  FALSE)
SET(GIT_FILE_VERSION_LONG  "${CMAKE_CURRENT_BINARY_DIR}/git.version.long")

EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} RESULT_VARIABLE ${GIT_RES_LONG}  OUTPUT_FILE ${GIT_FILE_VERSION_LONG})

FILE(READ ${GIT_FILE_VERSION_LONG} READ_DATA_LONG)
IF (${READ_DATA_LONG})
    STRING(REPLACE "\n" "" GIT_VERSION_LONG ${READ_DATA_LONG})
    STRING(REPLACE "v" "" GIT_VERSION_LONG ${GIT_VERSION_LONG})
ELSE()
    SET(GIT_VERSION_LONG "1.0")
ENDIF()
MESSAGE(STATUS "${PROJECT_NAME} version: ${GIT_VERSION_LONG}\n")

#Add user interface
#CMAKE_POLICY(SET CMP0071 NEW)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
SET(QT_HEADER_FILES
    v_main_window.h
    v_materials_window.h
    )

SET(QT_UI_FORMS
    v_main_window.ui
    v_materials_window.ui
    )

SET(QT_RESOURCES)

SET(HEADER_FILES
    v_database_interactor.h
    v_simulation_interactor.h
    )

SET(SOURCE_FILES
    v_main_window.cpp
    v_materials_window.cpp
    v_database_interactor.cpp
    v_simulation_interactor.cpp
    )
QT5_ADD_RESOURCES(GENERATED_QT_RESOURCES ${QT_RESOURCES})

#Add simulator module
SET(SIMULATOR_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/sim")
ADD_SUBDIRECTORY(${SIMULATOR_DIRECTORY})

#Create executable
ADD_EXECUTABLE(${EXE_NAME}
    "main.cpp"
    ${HEADER_FILES}
    ${SOURCE_FILES}
    ${QT_HEADER_FILES}
    ${GENERATED_QT_RESOURCES}
    )

TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Core)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Gui)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Widgets)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Sql)
ADD_DEPENDENCIES(${EXE_NAME} v_sim)
TARGET_LINK_LIBRARIES(${EXE_NAME} v_sim)

SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})

CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

PROJECT(vari)
SET(PROJECT_VENDOR_LONG "Wicron")
SET(ORG_WEBSITE "https://wicron.com")

SET(EXE_NAME ${PROJECT_NAME})

MESSAGE(STATUS "CREATING VARI APP\n")

#Set build type
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()
MESSAGE(STATUS "Build Type: ${CMAKE_BUILD_TYPE}\n")

#Set compiler flags
MESSAGE(STATUS "Using C++ compiler: ${CMAKE_CXX_COMPILER_ID}")
MESSAGE(STATUS "Using C compiler: ${CMAKE_C_COMPILER_ID}\n")
SET(CMAKE_CXX_STANDARD 11)
IF ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -Wall -fPIC")
ENDIF()
IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -fPIC -pthread")
ENDIF()
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DQT_NO_DEBUG")
SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   -DDEBUG_MODE -DQT_QML_DEBUG")

IF(CMAKE_BUILD_TYPE MATCHES Debug)
    MESSAGE(STATUS "C++ Flags: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
    MESSAGE(STATUS "C Flags: ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}\n")
ELSE()
    MESSAGE(STATUS "C++ Flags: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
    MESSAGE(STATUS "C Flags: ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}\n")
ENDIF()

#Find packages
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
SET(MODULES_FOLDERS "modules")

INCLUDE(common)

FIND_PACKAGE(Qt5Core    REQUIRED)
FIND_PACKAGE(Qt5Gui     REQUIRED)
FIND_PACKAGE(Qt5Widgets     REQUIRED)
FIND_PACKAGE(Qt5Sql     REQUIRED)

IF (${Qt5Core_FOUND})
    MESSAGE(STATUS "Found Qt 5 ${Qt5Core_VERSION}")
    MESSAGE(STATUS "Qt 5 Core Directory: ${Qt5Core_DIR}\n")
ENDIF()

INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Sql_INCLUDE_DIRS})

#Add user interface
#CMAKE_POLICY(SET CMP0071 NEW)
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTORCC ON)

SET(RESOURCES_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/resources)

SET(QT_RESOURCES
    ${RESOURCES_DIRECTORY}/resources.qrc)

SET(QT_UI_FORMS
    VWindowMain.ui
    VWindowMaterials.ui
    VWindowLayer.ui
    )

SET(HEADER_FILES
    VWindowMain.h
    VWindowMaterials.h
    VWindowCloth.h
    VWindowResin.h
    VWindowLayer.h
    VDatabaseInteractor.h
    VDatabaseCloth.h
    VDatabaseResin.h
    VSqlDatabase.h
    )

SET(SOURCE_FILES
    VWindowMain.cpp
    VWindowMaterials.cpp
    VWindowCloth.cpp
    VWindowResin.cpp
    VWindowLayer.cpp
    VDatabaseInteractor.cpp
    VDatabaseCloth.cpp
    VDatabaseResin.cpp
    VSqlDatabase.cpp
    )

#Add simulator module
SET(SIMULATOR_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/sim")
ADD_SUBDIRECTORY(${SIMULATOR_DIRECTORY})

#Set application version
FIND_PACKAGE(Git REQUIRED)
SET(GIT_RES_LONG  FALSE)
SET(GIT_FILE_VERSION_LONG  "${CMAKE_CURRENT_BINARY_DIR}/git.version.long")

EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} RESULT_VARIABLE ${GIT_RES_LONG}  OUTPUT_FILE ${GIT_FILE_VERSION_LONG})

FILE(READ ${GIT_FILE_VERSION_LONG} READ_DATA_LONG)
IF (${READ_DATA_LONG})
    STRING(REPLACE "\n" "" PROJECT_VERSION_LONG ${READ_DATA_LONG})
    STRING(REPLACE "v" "" PROJECT_VERSION_LONG ${PROJECT_VERSION_LONG})
ELSE()
    SET(PROJECT_VERSION_LONG "1.0")
ENDIF()
MESSAGE(STATUS "${PROJECT_NAME} version: ${PROJECT_VERSION_LONG}\n")

#Create executable
ADD_EXECUTABLE(${EXE_NAME}
    "main.cpp"
    ${HEADER_FILES}
    ${SOURCE_FILES}
    ${QT_UI_FORMS}
    ${QT_RESOURCES}
    )

TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Core)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Gui)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Widgets)
TARGET_LINK_LIBRARIES(${EXE_NAME} Qt5::Sql)
ADD_DEPENDENCIES(${EXE_NAME} v_sim)
TARGET_LINK_LIBRARIES(${EXE_NAME} v_sim)

SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})

#CONFIGURATING WINDOWS INSTALLER
IF(WIN32 AND CMAKE_BUILD_TYPE MATCHES Release)
    IF(NOT EXISTS $ENV{QTDIR})
        MESSAGE(WARNING "QTDIR environment variable is not set correctly. The installer script will not be generated.")
    ENDIF()
    IF(NOT EXISTS $ENV{COINDIR})
        MESSAGE(WARNING "COINDIR environment variable  is not set correctly. The installer script will not be generated.")
    ENDIF()
    IF (EXISTS $ENV{QTDIR} AND EXISTS $ENV{COINDIR})
        SET(APP_NAME "VARI")
        INCLUDE(win32.vari.install)
    ENDIF()
ENDIF()
